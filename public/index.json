[{"content":"Reverse Annnnnnny-Second-Now The function super_optimized_calculation is a Fibonacci generator. To solve this chall, we just use the 90th Fibonacci number and modulo it by each number in the v6 array. Code:\nv6=[0]*25 v6[0] = 35831; v6[1] = 143; v6[2] = 1061; v6[3] = 877; v6[4] = 29463179; v6[5] = 229; v6[6] = 112; v6[7] = 337; v6[8] = 1061; v6[9] = 47; v6[10] = 29599; v6[11] = 145; v6[12] = 127; v6[13] = 271639; v6[14] = 127; v6[15] = 353; v6[16] = 193; v6[17] = 191; v6[18] = 337; v6[19] = 1061; v6[20] = 193; v6[21] = 353; v6[22] = 269; v6[23] = 487; v6[24] = 245; a = 2880067194370816120 \u0026amp; ((1\u0026lt;\u0026lt;64)-1) for i in v6: print(chr(a%i),end=\u0026#39;\u0026#39;) js-safe After deobfuscating the code, we can see that the function addToPassword use some operation to check the pass code. If true, it uses this pass code as a key to decrypt the AES encrypted flag.\nfunction addToPassword(_0x43b7e8) { if (_0x12b1c8.length \u0026lt; 0x6) { _0x12b1c8 += _0x43b7e8; _0x38a66f(); if (_0x12b1c8.length === 0x6) { let _0xf3bbf = Array(0x6); for (let _0x2c8c6a = 0x0; _0x2c8c6a \u0026lt; 0x6; _0x2c8c6a += 0x1) { _0xf3bbf[_0x2c8c6a] = _0x12b1c8[_0x2c8c6a].charCodeAt(0x0); } let _0x4cedc7 = true; _0x4cedc7 \u0026amp;= _0xf3bbf[0x4] == _0xf3bbf[0x1] - 0x4; _0x4cedc7 \u0026amp;= _0xf3bbf[0x1] == (_0xf3bbf[0x0] ^ 0x44); _0x4cedc7 \u0026amp;= _0xf3bbf[0x0] == _0xf3bbf[0x2] - 0x7; _0x4cedc7 \u0026amp;= _0xf3bbf[0x3] == (_0xf3bbf[0x2] ^ 0x25); _0x4cedc7 \u0026amp;= _0xf3bbf[0x5] == (_0xf3bbf[0x0] ^ 0x14); _0x4cedc7 \u0026amp;= _0xf3bbf[0x4] == _0xf3bbf[0x1] - 0x4; _0x4cedc7 \u0026amp;= _0xf3bbf[0x0] == (_0xf3bbf[0x3] ^ 0x22); _0x4cedc7 \u0026amp;= _0xf3bbf[0x0] == _0xf3bbf[0x2] - 0x7; _0x4cedc7 \u0026amp;= _0xf3bbf[0x0] == _0xf3bbf[0x5] + 0xc; _0x4cedc7 \u0026amp;= _0xf3bbf[0x2] == _0xf3bbf[0x4] + 0x47; _0x4cedc7 \u0026amp;= _0xf3bbf[0x2] == (_0xf3bbf[0x5] ^ 0x13); _0x4cedc7 \u0026amp;= _0xf3bbf[0x5] == (_0xf3bbf[0x3] ^ 0x36); _0x4cedc7 \u0026amp;= 0x52 == _0xf3bbf[0x3]; if (_0x4cedc7) { document.getElementById(\u0026#34;display\u0026#34;).classList.add(\u0026#34;correct\u0026#34;); let _0x401b01 = CryptoJS.AES.decrypt(\u0026#34;U2FsdGVkX19WKWdho02xWkalqVZ3YrA7QrNN4JPOIb5OEO0CW3Qj8trHrcQNOwsw\u0026#34;, _0x12b1c8).toString(CryptoJS.enc.Utf8); console.log(_0x401b01); document.getElementById(\u0026#34;display\u0026#34;).textContent = _0x401b01; } else { document.getElementById(\u0026#34;display\u0026#34;).classList.add(\u0026#34;wrong\u0026#34;); } } } } After calculating, we get the pass code is p4wR0d. Use this pass code to decrypt the flag.\nFlag: bctf{345y-p4s5w0rd-\u0026gt;w\u0026lt;}\n","permalink":"//localhost:1313/posts/b01ler-wu/","summary":"Reverse Annnnnnny-Second-Now The function super_optimized_calculation is a Fibonacci generator. To solve this chall, we just use the 90th Fibonacci number and modulo it by each number in the v6 array. Code:\nv6=[0]*25 v6[0] = 35831; v6[1] = 143; v6[2] = 1061; v6[3] = 877; v6[4] = 29463179; v6[5] = 229; v6[6] = 112; v6[7] = 337; v6[8] = 1061; v6[9] = 47; v6[10] = 29599; v6[11] = 145; v6[12] = 127; v6[13] = 271639; v6[14] = 127; v6[15] = 353; v6[16] = 193; v6[17] = 191; v6[18] = 337; v6[19] = 1061; v6[20] = 193; v6[21] = 353; v6[22] = 269; v6[23] = 487; v6[24] = 245; a = 2880067194370816120 \u0026amp; ((1\u0026lt;\u0026lt;64)-1) for i in v6: print(chr(a%i),end=\u0026#39;\u0026#39;) js-safe After deobfuscating the code, we can see that the function addToPassword use some operation to check the pass code.","title":"BoilerCTF Write-up"},{"content":"Hi Nothing here\n","permalink":"//localhost:1313/posts/main/","summary":"Hi Nothing here","title":"This is my test blog post"}]